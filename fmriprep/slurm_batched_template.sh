#!/usr/bin/env bash
#
# Auto-generated by fmriprep_launcher.py (batched mode)
#
#SBATCH --job-name={job_name}
#SBATCH --partition={partition}
#SBATCH --time={time}
#SBATCH --cpus-per-task={cpus_per_task}
{mem_line}#SBATCH --nodes=1
#SBATCH --array=0-{array_max}
#SBATCH --output={log_dir}/%x_%A_%a.out
#SBATCH --error={log_dir}/%x_%A_%a.err
{account_line}{mail_line}{module_line}

set -euo pipefail

# ===== User settings (auto-generated) =====
BIDS_DIR="{bids}"
OUT_DIR="{out}"
WORK_DIR="{work}"
FS_LICENSE="{fs_license}"
SUBJECT_BATCH_FILE="{subject_file}"
RUNTIME="{runtime}"                  # singularity | fmriprep-docker | docker
CONTAINER="{container}"              # path to .sif or docker image:tag
OMP_THREADS="{omp_threads}"
NPROCS="{nprocs}"
MEM_MB="{mem_mb}"
EXTRA_FLAGS="{extra_flags}"
SKIP_BIDS_VAL="{skip_bids_val}"
OUTPUT_SPACES="{output_spaces}"
USE_AROMA="{use_aroma}"
CIFTI="{cifti}"
FS_RECONALL="{fs_reconall}"
USE_SYN_SDC="{use_syn_sdc}"

# ===== Derived settings =====
# Read subject batches (each line may contain multiple space-separated subjects)
mapfile -t BATCHES < <(grep -v '^#' "$SUBJECT_BATCH_FILE" | sed '/^$/d')
BATCH="${BATCHES[$SLURM_ARRAY_TASK_ID]}"
if [[ -z "$BATCH" ]]; then
  echo "No batch for index $SLURM_ARRAY_TASK_ID"; exit 1;
fi

# Parse subjects from batch (space-separated)
IFS=' ' read -ra SUBJECTS <<< "$BATCH"
echo "=== Processing ${#SUBJECTS[@]} subject(s) in this job ==="
for SUB in "${SUBJECTS[@]}"; do
  echo "  - $SUB"
done

# Build participant labels (remove sub- prefix)
LABELS=()
for SUB in "${SUBJECTS[@]}"; do
  LABELS+=("${SUB#sub-}")
done

mkdir -p "$OUT_DIR" "$WORK_DIR" "{log_dir}"

# Build CLI with multiple participant labels
CLI=(participant --participant-label "${LABELS[@]}" --nprocs "$NPROCS" --omp-nthreads "$OMP_THREADS" --mem-mb "$MEM_MB" --notrack)

if [[ "$SKIP_BIDS_VAL" == "1" ]]; then
  CLI+=(--skip-bids-validation)
fi
if [[ -n "$OUTPUT_SPACES" ]]; then
  CLI+=(--output-spaces $OUTPUT_SPACES)
fi
if [[ "$USE_AROMA" == "1" ]]; then
  CLI+=(--use-aroma)
fi
if [[ "$CIFTI" == "1" ]]; then
  CLI+=(--cifti-output 91k)
fi
if [[ "$FS_RECONALL" == "0" ]]; then
  CLI+=(--fs-no-reconall)
fi
if [[ "$USE_SYN_SDC" == "1" ]]; then
  CLI+=(--use-syn-sdc)
fi
if [[ -n "$EXTRA_FLAGS" ]]; then
  CLI+=($EXTRA_FLAGS)
fi

echo "=== Running fMRIPrep for batch $SLURM_ARRAY_TASK_ID on $HOSTNAME ==="
echo "Runtime: $RUNTIME"
echo "Container: $CONTAINER"
echo "Subjects: ${SUBJECTS[@]}"
echo "----------------------------------------------"

if [[ "$RUNTIME" == "singularity" ]]; then
  RT_BIN=$(command -v singularity || command -v apptainer)
  "$RT_BIN" run --cleanenv \
    -B "$BIDS_DIR:/data:ro" \
    -B "$OUT_DIR:/out" \
    -B "$WORK_DIR:/work" \
    -B "$FS_LICENSE:/opt/freesurfer/license.txt:ro" \
    "$CONTAINER" \
    /data /out "${CLI[@]}" --work-dir /work --fs-license-file /opt/freesurfer/license.txt

elif [[ "$RUNTIME" == "fmriprep-docker" ]]; then
  fmriprep-docker "$BIDS_DIR" "$OUT_DIR" "${CLI[@]}" --work-dir "$WORK_DIR" --fs-license-file "$FS_LICENSE"

elif [[ "$RUNTIME" == "docker" ]]; then
  docker run --rm \
    -v "$BIDS_DIR:/data:ro" \
    -v "$OUT_DIR:/out" \
    -v "$WORK_DIR:/work" \
    -v "$FS_LICENSE:/opt/freesurfer/license.txt:ro" \
    "$CONTAINER" \
    /data /out "${CLI[@]}" --fs-license-file /opt/freesurfer/license.txt --work-dir /work

else
  echo "Unknown runtime: $RUNTIME" >&2; exit 2
fi